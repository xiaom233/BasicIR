# general settings
name: 057_MPRNet_Benchmark_ITSindoor_Cosine_GT256B8_600k
model_type: ImageRestorationModel
scale: 1
num_gpu: 4  # set num_gpu: 0 for cpu mode
manual_seed: 100

# dataset and data loader settings
datasets:
  train:
    name: ITS_indoor
    type: DehazingImageDataset
    # in_ch: 3    ## RGB image
    dataroot_gt: /data/yhliu/DATA/Dehaze/clear
    dataroot_lq: /data/yhliu/DATA/Dehaze/hazy

    filename_tmpl: '{}'
    io_backend:
      type: disk

    # data loader
    use_flip: true
    use_rot: true
    use_shuffle: true
    num_worker_per_gpu: 4
    batch_size_per_gpu: 2
    # iters: [600000]
    gt_size: 256
    # gt_sizes: [256]
    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  val:
    name: SOTS_indoor
    type: DehazingImageDataset
    # in_ch: 3  ## RGB image
    dataroot_gt: /data/yhliu/DATA/Dehaze/SOTS/indoor/nyuhaze500/gt
    dataroot_lq: /data/yhliu/DATA/Dehaze/SOTS/indoor/nyuhaze500/hazy
    io_backend:
      type: disk

# network structures
network_g:
  type: MPRNet # all hyper-parameters are default in the original version
  in_c: 3
  out_c: 3
  n_feat: 80
  scale_unetfeats: 48
  scale_orsnetfeats: 32
  num_cab: 8
  kernel_size: 3
  reduction: 4
  bias: false



# path
path:
  pretrain_network_g: ~
  strict_load_g: true
  resume_state: ~
# training settings
train:
  total_iter: 600000
  warmup_iter: 5000 # -1 for no warm up
  use_grad_clip: true

  # Split 300k iterations into two cycles. 
  # 1st cycle: fixed 3e-4 LR for 92k iters. 
  # 2nd cycle: cosine annealing (3e-4 to 1e-6) for 208k iters.
  scheduler:
    type: CosineAnnealingRestartLR
    periods: [600000]       
    restart_weights: [1]
    eta_min: 0.00000001

  optim_g:
    type: AdamW
    lr: !!float 2e-4
    weight_decay: !!float 2e-2
    betas: [0.9, 0.999]
  
  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 1
    reduction: mean

# validation settings
val:
  # window_size: 8
  val_freq: !!float 5e3
  save_img: false
  rgb2bgr: true
  use_image: true
  max_minibatch: 1
  padding_factor: 8
  is_square: false
  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false

# logging settings
logger:
  print_freq: 250
  save_checkpoint_freq: !!float 1e4
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
