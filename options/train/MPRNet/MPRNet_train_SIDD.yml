# ------------------------------------------------------------------------
# Copyright (c) 2022 megvii-model. All Rights Reserved.
# ------------------------------------------------------------------------
# Modified from BasicSR (https://github.com/xinntao/BasicSR)
# Copyright 2018-2020 BasicSR Authors
# ------------------------------------------------------------------------
# general settings
name: 022_HINet_Benchmark_real_noise_Cosine_GT256B8_600k
model_type: ImageRestorationModel
scale: 1
num_gpu: 4
manual_seed: 10

datasets:
  train:
    name: SIDD-train
    type: PairedImageDataset
    dataroot_gt: /data0/zyli/datasets/SIDD/train/gt_crops_512_384.lmdb
    dataroot_lq: /data0/zyli/datasets/SIDD/train/input_crops_512_384.lmdb

    filename_tmpl: '{}'
    io_backend:
      type: lmdb

    use_flip: true
    use_rot: true

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 2
    batch_size_per_gpu: 2

    ### -------------Progressive training--------------------------
    # mini_batch_sizes: [8,5,4,2,1,1]             # Batch size per gpu
    # iters: [92000,64000,48000,36000,36000,24000]
    # gt_size: 384   # Max patch size for progressive training
    # gt_sizes: [128,160,192,256,320,384]  # Patch sizes for progressive training.
    ### ------------------------------------------------------------

    ### ------- Training on single fixed-patch size 256x256---------
    mini_batch_sizes: [1]
    iters: [600000]
    gt_size: 256
    gt_sizes: [256]
    ### ------------------------------------------------------------

    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  val:
    name: SIDD-test
    type: PairedImageDataset
    dataroot_gt: /data0/zyli/datasets/SIDD/val/groundtruth
    dataroot_lq: /data0/zyli/datasets/SIDD/val/input
    io_backend:
      type: disk


network_g:
  type: MPRNet # all hyper-parameters are default in the original version
  in_c: 3
  out_c: 3
  n_feat: 80
  scale_unetfeats: 48
  scale_orsnetfeats: 32
  num_cab: 8
  kernel_size: 3
  reduction: 4
  bias: false

# path
path:
  pretrain_network_g: ~
  strict_load_g: true
  resume_state: ~

# training settings
train:
  total_iter: 600000
  warmup_iter: 5000 # -1 for no warm up
  use_grad_clip: true

  # Split 300k iterations into two cycles.
  # 1st cycle: fixed 3e-4 LR for 92k iters.
  # 2nd cycle: cosine annealing (3e-4 to 1e-6) for 208k iters.
  scheduler:
    type: CosineAnnealingRestartLR
    periods: [600000]
    restart_weights: [1]
    eta_min: 0.00000001

  mixing_augs:
    mixup: false
    mixup_beta: 1.2
    use_identity: true

  optim_g:
    type: AdamW
    lr: !!float 2e-4
    weight_decay: !!float 2e-2
    betas: [0.9, 0.999]

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 1
    reduction: mean

# validation settings
val:
  val_freq: !!float 2e4
  save_img: false
  grids: false

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false
    ssim:
      type: calculate_ssim
      crop_border: 0
      test_y_channel: false

# logging settings
logger:
  print_freq: 200
  save_checkpoint_freq: !!float 5e3
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
